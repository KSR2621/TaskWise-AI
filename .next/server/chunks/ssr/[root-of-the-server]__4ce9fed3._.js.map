{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-tasks.ts"],"sourcesContent":["// src/ai/flows/suggest-tasks.ts\n'use server';\n/**\n * @fileOverview A task suggestion AI agent.\n *\n * - suggestTasks - A function that suggests tasks based on user projects and habits.\n * - SuggestTasksInput - The input type for the suggestTasks function.\n * - SuggestTasksOutput - The return type for the suggestTasks function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestTasksInputSchema = z.object({\n  projects: z\n    .string()\n    .describe('The user current projects, comma separated.'),\n  pastHabits: z.string().describe('The user past habits, comma separated.'),\n});\nexport type SuggestTasksInput = z.infer<typeof SuggestTasksInputSchema>;\n\nconst SuggestTasksOutputSchema = z.object({\n  tasks: z.array(z.string()).describe('An array of suggested tasks.'),\n});\nexport type SuggestTasksOutput = z.infer<typeof SuggestTasksOutputSchema>;\n\nexport async function suggestTasks(input: SuggestTasksInput): Promise<SuggestTasksOutput> {\n  return suggestTasksFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestTasksPrompt',\n  input: {schema: SuggestTasksInputSchema},\n  output: {schema: SuggestTasksOutputSchema},\n  prompt: `You are a personal assistant. Based on the user's current projects and past habits, suggest some tasks that the user may want to add to their to-do list.\n\nCurrent Projects: {{{projects}}}\nPast Habits: {{{pastHabits}}}\n\nSuggest 5 tasks.`,\n});\n\nconst suggestTasksFlow = ai.defineFlow(\n  {\n    name: 'suggestTasksFlow',\n    inputSchema: SuggestTasksInputSchema,\n    outputSchema: SuggestTasksOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;AAEhC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;IACZ,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,OAAO,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACtC;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuB;IACvC,QAAQ;QAAC,QAAQ;IAAwB;IACzC,QAAQ,CAAC;;;;;gBAKK,CAAC;AACjB;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAzBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/break-down-task.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow to break down a large task into smaller, manageable subtasks.\n *\n * - breakDownTask - A function that handles the task breakdown process.\n * - BreakDownTaskInput - The input type for the breakDownTask function.\n * - BreakDownTaskOutput - The return type for the breakDownTask function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst BreakDownTaskInputSchema = z.object({\n  task: z.string().describe('The large task to break down into smaller subtasks.'),\n});\nexport type BreakDownTaskInput = z.infer<typeof BreakDownTaskInputSchema>;\n\nconst BreakDownTaskOutputSchema = z.object({\n  subtasks: z.array(z.string()).describe('An array of subtasks that make up the larger task.'),\n});\nexport type BreakDownTaskOutput = z.infer<typeof BreakDownTaskOutputSchema>;\n\nexport async function breakDownTask(input: BreakDownTaskInput): Promise<BreakDownTaskOutput> {\n  return breakDownTaskFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'breakDownTaskPrompt',\n  input: {schema: BreakDownTaskInputSchema},\n  output: {schema: BreakDownTaskOutputSchema},\n  prompt: `You are a task management expert. Your job is to break down large tasks into smaller, more manageable subtasks.\n\n  Task: {{{task}}}\n\n  Consider the following when breaking down the task:\n  - What are the individual steps required to complete the task?\n  - What are the dependencies between the steps?\n  - How can the steps be grouped into logical subtasks?\n\n  Return the subtasks as a JSON array of strings.\n  `,\n});\n\nconst breakDownTaskFlow = ai.defineFlow(\n  {\n    name: 'breakDownTaskFlow',\n    inputSchema: BreakDownTaskInputSchema,\n    outputSchema: BreakDownTaskOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACzC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ;IAAyB;IAC1C,QAAQ,CAAC;;;;;;;;;;EAUT,CAAC;AACH;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-schedule.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview AI flow to suggest optimal scheduling times for tasks with smart reminders.\n *\n * - suggestSchedule - A function that suggests an optimal schedule for a task.\n * - SuggestScheduleInput - The input type for the suggestSchedule function.\n * - SuggestScheduleOutput - The return type for the suggestSchedule function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestScheduleInputSchema = z.object({\n  taskName: z.string().describe('The name of the task to schedule.'),\n  deadline: z.string().describe('The deadline for the task (e.g., YYYY-MM-DD HH:MM).'),\n  userAvailability: z.string().describe('The user availability (e.g., available between 9 AM and 5 PM on weekdays).'),\n  priority: z.enum(['High', 'Medium', 'Low']).describe('The priority of the task.'),\n});\nexport type SuggestScheduleInput = z.infer<typeof SuggestScheduleInputSchema>;\n\nconst SuggestScheduleOutputSchema = z.object({\n  suggestedSchedule: z.string().describe('The suggested schedule for the task (e.g., YYYY-MM-DD HH:MM).'),\n  reminderInterval: z.string().describe('The suggested reminder interval (e.g., 1 hour before, 1 day before).'),\n  reasoning: z.string().describe('Explanation of why the schedule and interval are optimal.'),\n});\nexport type SuggestScheduleOutput = z.infer<typeof SuggestScheduleOutputSchema>;\n\nexport async function suggestSchedule(input: SuggestScheduleInput): Promise<SuggestScheduleOutput> {\n  return suggestScheduleFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestSchedulePrompt',\n  input: {schema: SuggestScheduleInputSchema},\n  output: {schema: SuggestScheduleOutputSchema},\n  prompt: `You are an AI assistant that suggests optimal schedules and smart reminders for tasks.\n\n  Given the following task details, suggest an optimal schedule and reminder interval to ensure the task is completed on time.\n\n  Task Name: {{{taskName}}}\n  Deadline: {{{deadline}}}\n  User Availability: {{{userAvailability}}}\n  Priority: {{{priority}}}\n\n  Consider the user's availability and the task's priority when suggesting the schedule and reminder interval.\n  Explain your reasoning for the suggested schedule and reminder interval. Adhere to the output schema.\n  `,\n});\n\nconst suggestScheduleFlow = ai.defineFlow(\n  {\n    name: 'suggestScheduleFlow',\n    inputSchema: SuggestScheduleInputSchema,\n    outputSchema: SuggestScheduleOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE,QAAQ,CAAC;AACvD;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;EAWT,CAAC;AACH;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/prioritize-tasks.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview AI-powered task prioritization flow.\n *\n * - prioritizeTasks - A function that prioritizes a list of tasks based on deadlines, importance, and user-defined criteria.\n * - PrioritizeTasksInput - The input type for the prioritizeTasks function.\n * - PrioritizeTasksOutput - The return type for the prioritizeTasks function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst TaskSchema = z.object({\n  id: z.string().describe('Unique identifier for the task.'),\n  description: z.string().describe('Description of the task.'),\n  deadline: z.string().describe('The deadline for the task (e.g., YYYY-MM-DD).'),\n  importance: z.enum(['High', 'Medium', 'Low']).describe('Importance level of the task.'),\n  userCriteria: z.string().optional().describe('Any user-defined criteria for prioritizing the task.'),\n});\n\nexport type Task = z.infer<typeof TaskSchema>;\n\nconst PrioritizeTasksInputSchema = z.object({\n  tasks: z.array(TaskSchema).describe('Array of tasks to be prioritized.'),\n});\n\nexport type PrioritizeTasksInput = z.infer<typeof PrioritizeTasksInputSchema>;\n\nconst PrioritizedTaskSchema = TaskSchema.extend({\n  priorityScore: z.number().describe('A numerical score indicating the priority of the task.'),\n  reasoning: z.string().describe('Explanation of why the task was prioritized as such.')\n});\n\nconst PrioritizeTasksOutputSchema = z.array(PrioritizedTaskSchema);\n\nexport type PrioritizeTasksOutput = z.infer<typeof PrioritizeTasksOutputSchema>;\n\nexport async function prioritizeTasks(input: PrioritizeTasksInput): Promise<PrioritizeTasksOutput> {\n  return prioritizeTasksFlow(input);\n}\n\nconst prioritizeTasksPrompt = ai.definePrompt({\n  name: 'prioritizeTasksPrompt',\n  input: {schema: PrioritizeTasksInputSchema},\n  output: {schema: PrioritizeTasksOutputSchema},\n  prompt: `You are an AI task prioritization assistant. Analyze the following list of tasks and prioritize them based on their deadlines, importance, and any user-defined criteria. Return the tasks with a priority score (higher is more important) and the reasoning for the score.\n\nTasks:\n{{#each tasks}}\n- ID: {{this.id}}\n  Description: {{this.description}}\n  Deadline: {{this.deadline}}\n  Importance: {{this.importance}}\n  User Criteria: {{this.userCriteria}}\n{{/each}}\n\nOutput the tasks with a 'priorityScore' and 'reasoning' field for each task.\n\nExample output:\n[\n  {\n    \"id\": \"task1\",\n    \"description\": \"Grocery Shopping\",\n    \"deadline\": \"2024-07-08\",\n    \"importance\": \"High\",\n    \"userCriteria\": \"Get ingredients for dinner\",\n    \"priorityScore\": 95,\n    \"reasoning\": \"High importance and approaching deadline.\"\n  },\n  {\n    \"id\": \"task2\",\n    \"description\": \"Book Hotel\",\n    \"deadline\": \"2024-07-15\",\n    \"importance\": \"Medium\",\n    \"userCriteria\": \"Near the beach\",\n    \"priorityScore\": 60,\n    \"reasoning\": \"Medium importance and a week until the deadline.\"\n  }\n]\n`,\n});\n\nconst prioritizeTasksFlow = ai.defineFlow(\n  {\n    name: 'prioritizeTasksFlow',\n    inputSchema: PrioritizeTasksInputSchema,\n    outputSchema: PrioritizeTasksOutputSchema,\n  },\n  async input => {\n    const {output} = await prioritizeTasksPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE,QAAQ,CAAC;IACvD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAIA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,YAAY,QAAQ,CAAC;AACtC;AAIA,MAAM,wBAAwB,WAAW,MAAM,CAAC;IAC9C,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAEA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AAIrC,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IAtDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {suggestTasks as '40ae71f738ac94f30825828921cf3d9cee6e9b89b7'} from 'ACTIONS_MODULE0'\nexport {breakDownTask as '4034102160681f2f06af7f82311e9c8a2bdb322e08'} from 'ACTIONS_MODULE1'\nexport {suggestSchedule as '4005baa4f770cb4c0c95c5cbf0380e07bf5daee929'} from 'ACTIONS_MODULE2'\nexport {prioritizeTasks as '407451eb65db7f668309af6af41d4890704f7b3f63'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 624, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 638, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}